name: "Steampipe IaC GitHub Action"
author: "Steampipe.io"
description: "Scan for vulnerabilities in your Terraform infrastructure as code in your Actions workflow using Steampipe"

branding:
  color: "red"
  icon: "shield"

inputs:
  mod_url:
    description: "Git URL of the terraform compliance mod that runs. This is passed verbatim to `git clone`"
    required: true
  steampipe_version:
    description: "The version of Steampipe that will be installed. If unspecified, installs the latest version"
    required: false
    default: "latest"
  checks:
    description: "A list of benchmarks and controls to run (multi-line). If unspecified, it runs all benchmarks and controls in the mod"
    required: false
    default: "all"
  paths:
    description: "Paths to terraform files to scan (multi-line). If unspecified, it scans all `.tf` files in the repository"
    required: false
    default: "./**/*.tf"
  github_token:
    description: "GitHub Token used to generate job summary and annotations. Note that annotations are generated only if this action is triggered by a Pull Request"
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@v3

    - name: Create temporary directories
      shell: bash
      id: make-temp-dir
      run: |
        # Create temporary directories for steampipe and mod installation
        tmp=$(mktemp -d)

        tmp_install_dir=$tmp/sp_install_dir
        tmp_mod_dir=$tmp/mod_dir

        mkdir -p $tmp_install_dir
        mkdir -p $tmp_mod_dir

        echo "tmp-install-dir=$tmp_install_dir" >> $GITHUB_OUTPUT
        echo "tmp-mod-dir=$tmp_mod_dir" >> $GITHUB_OUTPUT

    - name: Install Steampipe
      shell: bash
      run: |
        # Install Steampipe
        VER=${{ inputs.steampipe_version }}
        if [ "$VER" = "latest" ];then
          # set to an empty string so that the installer picks up the latest version (default behavior)
          VER=""
        fi

        curl https://raw.githubusercontent.com/turbot/steampipe/main/install.sh | sudo bash -s $VER
        steampipe --version
        steampipe query "select 1" --install-dir=${{ steps.make-temp-dir.outputs.tmp-install-dir }}

    - name: Get paths
      id: get-paths
      shell: bash
      run: |
        # Convert multiline 'paths' input to single line with quotes in to configure the plugin connection
        if [ -z "${{ inputs.paths }}" ]
        then
          # default to all terraform files in the repository
          Paths="./**/*.tf"
        else
          Paths=""
          while read line; do
            if [ -z "$Paths" ];then
              Paths="\"$line\""
            else
              Paths="$Paths,\"$line\""
            fi
          done <<EOF
        ${{ inputs.paths }}
        EOF
        fi

        echo "quoted_paths_list=$Paths" >> $GITHUB_OUTPUT

    - name: Install and configure Terraform plugin
      shell: bash
      run: |
        # Setup plugin and connection
        steampipe plugin install terraform --install-dir=${{ steps.make-temp-dir.outputs.tmp-install-dir }} > /dev/null

        connection_data='
        connection "terraform" {
          plugin = "terraform"
          paths = [ ${{ steps.get-paths.outputs.quoted_paths_list }} ]
        }
        '

        echo "${connection_data}" > "${{ steps.make-temp-dir.outputs.tmp-install-dir }}/config/terraform.spc"

    - name: Get mod
      shell: bash
      run: |
        # Clone and setup mod
        git clone --depth 1 "${{ inputs.mod_url }}" ${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        cd ${{ steps.make-temp-dir.outputs.tmp-mod-dir }}
        steampipe mod install --install-dir=${{ steps.make-temp-dir.outputs.tmp-install-dir }}
        cd -

    - name: Get checks
      id: get-checks
      shell: bash
      run: |
        # Convert multiline 'checks' input to single line arguments which we can send to 'check'
        if [ -z "${{ inputs.checks }}" ]
        then
          # default to all
          RunList="all"
        else
          RunList=
          while read line; do
            RunList="$RunList $line"
          done <<EOF
        ${{ inputs.checks }}
        EOF
        fi
        echo "run_list=$RunList" >> $GITHUB_OUTPUT

    - name: Run checks
      id: run-checks
      shell: bash
      run: |
        # Run Steampipe Check
        set +e
        STEAMPIPE_CHECK_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --export=json,md --mod-location=${{ steps.make-temp-dir.outputs.tmp-mod-dir }} --install-dir=${{ steps.make-temp-dir.outputs.tmp-install-dir }}
        # ignore the 1 exit code which gets set if there are only alarms
        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT
        exit 0

    - name: Annotate and summarize
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js ${{ steps.get-checks.outputs.run_list }}
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Exit
      shell: bash
      run: |
        # Exit normally if there were no errors in the checks
        if [[ ${{ steps.run-checks.outputs.exit_code }} -le 1 ]];then
          exit 0
        else
          exit ${{ steps.run-checks.outputs.exit_code }}
        fi
