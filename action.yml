name: "Steampipe IaC GitHub Action"
author: "Steampipe.io"
description: "Run Steampipe against Terraform infrastructure code in your Actions workflow"

branding:
  color: "red"
  icon: "shield"

inputs:
  mod_url:
    description: "Git URL of specific terraform compliance mod that will be installed. This will be passed verbatim to `git clone`"
    required: true
  steampipe_version:
    description: "The version number of Steampipe that will be installed"
    required: false
    default: ""
  checks:
    description: "A list of benchmarks and controls to run (multi-line). If unspecified, it runs `check all`"
    required: false
    default: "all"
  paths:
    description: "Paths to terraform files to scan (multi-line). If unspecified, it scans all `.tf` files in the repository"
    required: false
    default: "./**/*.tf"
  github_token:
    description: "Token used to generate annotations if this action is triggered by a Pull Request and as such this token must have the necessary permissions to create annotations."
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Setup Node
      uses: actions/setup-node@v3
    - name: Install Steampipe
      shell: bash
      run: |
        # Install Steampipe
        curl https://raw.githubusercontent.com/turbot/steampipe/main/install.sh | sudo bash -s ${{ inputs.steampipe_version }}
        steampipe --version
        mkdir -p /tmp/sp_install_dir
        steampipe query "select 1" --install-dir /tmp/sp_install_dir
    - name: Get paths
      id: get-paths
      shell: bash
      run: |
        # Convert multiline 'paths' input to single line with quotes in to configure the plugin connection
        if [ -z "${{ inputs.paths }}" ]
        then
          # default to all terraform files in the repository
          Paths="./**/*.tf"
        else
          Paths=""
          while read line; do
            if [ -z "$Paths" ];then
              Paths="\"$line\""
            else
              Paths="$Paths,\"$line\""
            fi
          done <<EOF
        ${{ inputs.paths }}
        EOF
        fi
        echo "quoted_paths_list=$Paths" >> $GITHUB_OUTPUT
    - name: Install and configure Terraform plugin
      shell: bash
      run: |
        # Setup plugin and connection
        steampipe plugin install terraform --install-dir /tmp/sp_install_dir > /dev/null
        # write config
        connection_data="
        connection \"terraform\" {
          plugin = \"terraform\"
          paths = [ ${{ steps.get-paths.outputs.quoted_paths_list }} ]
        }
        "
        # Write the config file
        printf '%s\n' "$connection_data" > "/tmp/sp_install_dir/config/terraform.spc"
    - name: Get mod
      shell: bash
      run: |
        # Clone and setup mod
        mkdir /tmp/mod
        git clone --depth 1 "${{ inputs.mod_url }}" /tmp/mod
        cd /tmp/mod
        steampipe mod install
        cd -
    - name: Get checks
      id: get-checks
      shell: bash
      run: |
        # Convert multiline 'checks' input to single line arguments which we can send to 'check'
        if [ -z "${{ inputs.checks }}" ]
        then
          # default to all
          RunList="all"
        else
          RunList=
          while read line; do
            RunList="$RunList $line"
          done <<EOF
        ${{ inputs.checks }}
        EOF
        fi
        echo "run_list=$RunList" >> $GITHUB_OUTPUT
    - name: Run checks
      id: run-checks
      shell: bash
      run: |
        # Run Steampipe Check
        set +e
        STEAMPIPE_CHECK_DISPLAY_WIDTH=120 steampipe check ${{ steps.get-checks.outputs.run_list }} --output=brief --mod-location="/tmp/mod" --export=json,md --install-dir=/tmp/sp_install_dir
        # ignore the 1 exit code which gets set if there are only alarms
        echo "exit_code=$(echo $?)" >> $GITHUB_OUTPUT
        exit 0
    - name: Annotate and summarize
      shell: bash
      run: |
        node ${{ github.action_path }}/dist/index.js ${{ steps.get-checks.outputs.run_list }}
      env:
        INPUT_GITHUB-TOKEN: ${{ inputs.github_token }}
    - name: Exit
      shell: bash
      run: |
        # Exit normally if there were no errors in the checks
        if [[ ${{ steps.run-checks.outputs.exit_code }} -le 1 ]];then
          exit 0
        else
          exit ${{ steps.run-checks.outputs.exit_code }}
        fi
